from maze import MazeImg
from maze import Maze
import time
import cv2 as cv

name=input("Ime slike u input folderu(sa ekstenzijom): ")
solver=input("Resavac(DFS, BFS, A*, Dijkstra): ")

pic_path="../input/" + name 

start_time=time.time()

maze=Maze(pic_path)
pic_res=cv.imread(pic_path)

solution=maze.astar(maze.img.start_string, maze.img.finish_string)
length=len(solution)

duzina_puta=0

for s in range(0,length-1):
    curr=solution[s].split("_")
    nxt=solution[s+1].split("_")
    
    curr[0]=int(curr[0])
    curr[1]=int(curr[1])
    nxt[0]=int(nxt[0])
    nxt[1]=int(nxt[1])

    if curr[0]==nxt[0]:
        for x in range(min(curr[1], nxt[1]), max(curr[1], nxt[1])):
            pic_res[curr[0]][x]=[0,0,255]
    elif curr[1]==nxt[1]:
        for y in range(min(curr[0], nxt[0]), max(curr[0], nxt[0])+1):
            pic_res[y][curr[1]]=[0,0,255]

end_time=time.time()

print("astar: " + str(length) + " za %g sekundi" % (end_time - start_time))
    
start_time=time.time()

solution=maze.dijkstra(maze.img.start_string, maze.img.finish_string)
length=len(solution)

for s in range(0,length-1):
    curr=solution[s].split("_")
    nxt=solution[s+1].split("_")
    curr[0]=int(curr[0])
    curr[1]=int(curr[1])
    nxt[0]=int(nxt[0])
    nxt[1]=int(nxt[1])

    if curr[0]==nxt[0]:
        for x in range(min(curr[1], nxt[1]), max(curr[1], nxt[1])):
            pic_res[curr[0]][x]=[255,0,0]
    elif curr[1]==nxt[1]:
        for y in range(min(curr[0], nxt[0]), max(curr[0], nxt[0])+1):
            pic_res[y][curr[1]]=[255,0,0]

end_time=time.time()
print("dijkstra: " + str(length) + " za %g sekundi" % (end_time - start_time))


name_no_ext=name[0:name.find(".")]
#
#
print("Cuvanje slike")
cv.imwrite("../output/" + name_no_ext + "_res.png", pic_res)





